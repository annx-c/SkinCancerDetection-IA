[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "load_img",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "img_to_array",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "preprocess_image",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def preprocess_image(image, target_size):\n    if image.mode != \"RGB\":\n        image = image.convert(\"RGB\")\n    image = image.resize(target_size)\n    image = img_to_array(image)\n    image = np.expand_dims(image, axis=0)\n    return image / 255.0\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    if request.method == 'POST':\n        if 'file' not in request.files:\n            return jsonify({'error': 'No file part'})\n        file = request.files['file']\n        if file.filename == '':\n            return jsonify({'error': 'No selected file'})\n        if file:\n            image = Image.open(io.BytesIO(file.read()))\n            processed_image = preprocess_image(image, target_size=(299, 299))  ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# Cargar el modelo\nmodel = load_model('modelo_cancer.h5')\ndef preprocess_image(image, target_size):\n    if image.mode != \"RGB\":\n        image = image.convert(\"RGB\")\n    image = image.resize(target_size)\n    image = img_to_array(image)\n    image = np.expand_dims(image, axis=0)\n    return image / 255.0",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model = load_model('modelo_cancer.h5')\ndef preprocess_image(image, target_size):\n    if image.mode != \"RGB\":\n        image = image.convert(\"RGB\")\n    image = image.resize(target_size)\n    image = img_to_array(image)\n    image = np.expand_dims(image, axis=0)\n    return image / 255.0\n@app.route('/', methods=['GET', 'POST'])\ndef index():",
        "detail": "app",
        "documentation": {}
    }
]